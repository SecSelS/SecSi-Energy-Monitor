substitutions:
  name: secsi-energy-monitor
  friendly_name: secsi-energy-monitor
  device_description: Energy meter by secsels.com
  ap_fallback_password: secsi-device
  dashboard_import_url: github://SecSelS/SecSi-Energy-Monitor/secsi_energy_monitor_production_lu.yaml
     
esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  comment: "${device_description}"

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
# Enable fallback hotspot (captive portal) in case wifi connection fails.
  ap:
    ssid: ${name}
    password: ${ap_fallback_password}
    ap_timeout: 15s
 
captive_portal:

# If you want to use ethernet, uncomment the following (make sure to remove all above wifi related settings and sensors)

#ethernet:
#  type: LAN8720
#  mdc_pin: GPIO23
#  mdio_pin: GPIO18
#  clk_mode: GPIO17_OUT
#  phy_addr: 1
 
# Disable serial logging
logger:
  baud_rate: 0
 
# Enable Home Assistant API
api:
# optional use of encryption key
#  encryption:
#    key: !secret encryption_key

ota:
  safe_mode: true
# Optional use of OTA-Password
#  password: !secret ota_password
#  encryption:
#    key: !secret encryption_key

web_server:
  port: 80
  
# Here the UART-Pins are defined for the p1 ports
# As the p1 only has rx, only these are defined
uart:
  - rx_pin:
      number: GPIO16
    baud_rate: 115200
    rx_buffer_size: 1700
    id: uart_p1_1
    
# Here the second P1 UART is defined (just uncomment if you use second p1)

#   - rx_pin:
#      number: GPIO3
#    baud_rate: 115200
#    rx_buffer_size: 1700
#    id: uart_p1_2

dsmr:
  - uart_id: uart_p1_1
    id: dsmr_p1_1_key
    decryption_key: !secret dsmr_key_p1_1
    max_telegram_length: 1700
    
# Here the second P1 UART DSMR Key is defined (just uncomment if you use second DSMR encrypted P1 port)

#  - uart_id: uart_p1_2
#    id: dsmr_p1_2_key
#    decryption_key: !secret dsmr_key_p1_2
#    max_telegram_length: 1700
 
sensor:
  - platform: dsmr
    dsmr_id: dsmr_p1_1_key
    energy_delivered_lux:
      name: "Energy Consumed"
      state_class: total_increasing
    energy_delivered_tariff1:
      name: "Energy Consumed Tariff 1"
      state_class: total_increasing
    energy_delivered_tariff2:
      name: "Energy Consumed Tariff 2"
      state_class: total_increasing
    energy_returned_lux:
      name: "Energy Produced"
      state_class: total_increasing
    energy_returned_tariff1:
      name: "Energy Produced Tariff 1"
      state_class: total_increasing
    energy_returned_tariff2:
      name: "Energy Produced Tariff 2"
      state_class: total_increasing
    power_delivered:
      name: "Power Consumed"
      accuracy_decimals: 3
    power_returned:
      name: "Power Produced"
      accuracy_decimals: 3
    electricity_failures:
      name: "Electricity Failures"
      icon: mdi:alert
    electricity_long_failures:
      name: "Long Electricity Failures"
      icon: mdi:alert
    voltage_l1:
      name: "Voltage Phase 1"
    voltage_l2:
      name: "Voltage Phase 2"
    voltage_l3:
      name: "Voltage Phase 3"
    current_l1:
      name: "Current Phase 1"
    current_l2:
      name: "Current Phase 2"
    current_l3:
      name: "Current Phase 3"
    power_delivered_l1:
      name: "Power Consumed Phase 1"
      accuracy_decimals: 3
    power_delivered_l2:
      name: "Power Consumed Phase 2"
      accuracy_decimals: 3
    power_delivered_l3:
      name: "Power Consumed Phase 3"
      accuracy_decimals: 3
    power_returned_l1:
      name: "Power Produced Phase 1"
      accuracy_decimals: 3
    power_returned_l2:
      name: "Power Produced Phase 2"
      accuracy_decimals: 3
    power_returned_l3:
      name: "Power Produced Phase 3"
      accuracy_decimals: 3
    gas_delivered:
      name: "Gas Consumed"
      state_class: total_increasing
# Belgium Sensor (uncomment for belgium Meter)
#    gas_delivered_be:
#      name: "Gas Consumed"
#      state_class: total_increasing
  - platform: uptime
    name: "${name} Uptime"
  - platform: wifi_signal
    name: "${name} Wi-Fi Signal"
    update_interval: 60s
    
# For the usage of a second P1 Meter, make sure you define additional sensors with the correct id you want to use.
# For every platform, you have to use a seperate dsmr id, matching the dsmr key of your plugged meter.
# See example below. Do the same for text_sensor:

#  - platform: dsmr
#    dsmr_id: dsmr_p1_2_key
#    energy_delivered_lux:
#      name: "Energy Consumed"
#      state_class: total_increasing
 
text_sensor:
  - platform: dsmr
    dsmr_id: dsmr_p1_1_key
    identification:
      name: "DSMR Identification"
    p1_version:
      name: "DSMR Version"
# Belgium P1 Version (comment above and uncomment below)
#    p1_version_be:
#      name: "DSMR Version"
    gas_equipment_id:
      name: "Gas Equipment ID"
    electricity_tariff:
      name: "Electricity Tariff"
    water_equipment_id:
      name: "Water Equipment ID"
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Wi-Fi SSID"
    bssid:
      name: "Wi-Fi BSSID"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

# ESPHOME Updates
dashboard_import:
  package_import_url: ${dashboard_import_url}
  import_full_config: false

# For defining additional Sensors (ADC, Pulsecounters etc.) please look at the manual
